#!/bin/bash

# WARNING: This is an auto-generated script. DO NOT EDIT directly.
# Generated by podFiles deployment tool.
# To make changes, edit the template files in cmd/deploy/tpl
# Source: https://github.com/zrcoder/podFiles
# Then regenerate this script using: make gen-script

# Exit on error and undefined variables
set -eu

# Check terminal color support
if [ -t 1 ] && command -v tput >/dev/null 2>&1 && [ "$(tput colors)" -ge 8 ]; then
    # Define colors for terminal output
    GREEN='\033[0;32m'  # Success
    BLUE='\033[0;36m'   # Info
    YELLOW='\033[1;93m' # Warning
    RED='\033[0;31m'    # Error
    NC='\033[0m'        # Reset
else
    # No color support
    GREEN='' BLUE='' YELLOW='' RED='' NC=''
fi

# Error handler
trap 'if [ -n "$RED" ]; then echo -e "${RED}[ERROR]${NC} Line $LINENO, exit code: $?"; else echo "[ERROR] Line $LINENO, exit code: $?"; fi' ERR

# Default values
DEFAULT_NAMESPACE="podfiles"
DEFAULT_IMAGE="podfiles:latest"
DEFAULT_SERVICE_TYPE="ClusterIP"
NS_BLACK_LIST=""

# Read user input with default value
read_input() {
    if [ -z "$2" ]; then
        printf "${BLUE}%s${NC}: " "$1" >/dev/tty
    else
        printf "${BLUE}%s${NC} [${YELLOW}%s${NC}]: " "$1" "$2" >/dev/tty
    fi
    read -r input </dev/tty
    echo "${input:-$2}"
}

# Read service type selection
read_service_type() {
    printf "${BLUE}Choose service type${NC} [${YELLOW}1${NC}]: (1) ClusterIP | (2) NodePort | (3) Ingress ${BLUE}>${NC} " >/dev/tty
    read -r choice </dev/tty
    case "${choice:-1}" in
        1|"") echo "ClusterIP";;
        2) echo "NodePort";;
        3) echo "Ingress";;
        *) printf "${YELLOW}Invalid choice, using default: ClusterIP${NC}\n" >/dev/tty
           echo "ClusterIP";;
    esac
}


# Interactive inputs
echo -e "${GREEN}Welcome to podFiles deployment script!${NC}"
echo -e "${BLUE}Press enter to accept default values or input your custom values.${NC}"
echo

NAMESPACE=$(read_input "Enter namespace" "$DEFAULT_NAMESPACE")
IMAGE=$(read_input "Enter image" "$DEFAULT_IMAGE")
SERVICE_TYPE=$(read_service_type)

# Handle Ingress domain if needed
INGRESS_DOMAIN=""
if [ "$SERVICE_TYPE" = "Ingress" ]; then
    INGRESS_DOMAIN=$(read_input "Enter ingress domain" "podfiles.example.com")
    SERVICE_TYPE="ClusterIP"
fi

echo
echo -e "${BLUE}PodFiles supports the namespace blacklist configuration and will not manage the files within it.${NC}"
echo -e "${BLUE}The list supports wildcards '*' at the beginning or end only, e.g., abc,*zz,hh*${NC}"
NS_BLACK_LIST=$(read_input "Enter namespace black list" "")

# Display configuration for confirmation
echo
echo -e "${GREEN}Configuration Summary:${NC}"
echo -e "${BLUE}Namespace:${NC} ${YELLOW}$NAMESPACE${NC}"
echo -e "${BLUE}Image:${NC} ${YELLOW}$IMAGE${NC}"
echo -e "${BLUE}Service Type:${NC} ${YELLOW}$SERVICE_TYPE${NC}"
if [ -n "$INGRESS_DOMAIN" ]; then
    echo -e "  ${BLUE}Ingress Domain:${NC} ${YELLOW}$INGRESS_DOMAIN${NC}"
fi
echo -e "${BLUE}Namespace Black List:${NC} ${YELLOW}$NS_BLACK_LIST${NC}"


# Ask for confirmation
echo
read -p "$(echo -e "${BLUE}Proceed with deployment? [Y/n]:${NC} ")" confirm
confirm="${confirm:-y}"
if [[ ! $confirm =~ ^[Yy] ]]; then
    echo -e "${YELLOW}Deployment cancelled.${NC}"
    exit 0
fi

# Create namespace if it doesn't exist
kubectl get namespace $NAMESPACE > /dev/null 2>&1 || kubectl create namespace $NAMESPACE

# Apply cluster resources
echo -e "${BLUE}Applying cluster resources...${NC}"
kubectl apply -f - << EOF
{{.ClusterResources}}
EOF

# Apply namespace resources
echo -e "${BLUE}Applying namespace resources...${NC}"
kubectl apply -n $NAMESPACE $NS_BLACK_LIST -f - << EOF
$(echo "{{.NamespaceResources}}" | IMAGE=$IMAGE envsubst)
EOF

# Apply ingress if domain is provided
if [ -n "$INGRESS_DOMAIN" ]; then
    echo -e "${BLUE}Applying ingress...${NC}"
    kubectl apply -n $NAMESPACE -f - << EOF
$(echo "{{.Ingress}}" | INGRESS_DOMAIN=$INGRESS_DOMAIN envsubst)
EOF
fi

echo -e "${GREEN}[SUCCESS] Deployment completed successfully${NC}"
echo
echo -e "${GREEN}Access podFiles:${NC}"
if [ -n "$INGRESS_DOMAIN" ]; then
    echo "  https://$INGRESS_DOMAIN"
elif [ "$SERVICE_TYPE" = "NodePort" ]; then
    NODE_PORT=$(kubectl get svc podfiles -n $NAMESPACE -o jsonpath='{.spec.ports[0].nodePort}')
    echo "  Service is exposed on NodePort: $NODE_PORT"
    echo "  Access URLs:"
    kubectl get nodes -o jsonpath='{range .items[*]}{.status.addresses[?(@.type=="InternalIP")].address}{"\n"}{end}' | \
    while read node_ip; do
        echo "  http://$node_ip:$NODE_PORT"
    done
else
    echo "  Use port-forward to access:"
    echo "  kubectl port-forward -n $NAMESPACE svc/podfiles 8080:80"
fi