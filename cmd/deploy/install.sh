#!/bin/bash

# This file is automatically generated by podFiles deploy tool.
# DO NOT EDIT THIS FILE DIRECTLY.
# See: https://github.com/zrcoder/podFiles/tree/main/cmd/deploy

set -e 

usage() {
    cat << HELP
Install podFiles service to Kubernetes cluster.

Usage: 
    $0 <namespace> <image> <domain>

Arguments:
    namespace   The namespace to deploy podFiles
    image       The Docker image for podFiles service
    domain      The domain name for ingress

Example:
    $0 xxx podfiles:latest podfiles.example.com

Options:
    -h, --help  Show this help message
HELP
    exit 0
}

# 处理帮助参数
case "$1" in
    -h|--help)
        usage
        ;;
esac

if [ -z "$3" ]; then
    echo "Error: Missing required arguments"
    echo
    usage
    exit 1
fi

NAMESPACE=$1
IMAGE=$2
DOMAIN=$3

echo "Installing podFiles with:"
echo "  Namespace: $NAMESPACE"
echo "  Image: $IMAGE"
echo "  Domain: $DOMAIN"

kubectl get namespace $NAMESPACE > /dev/null 2>&1 || kubectl create namespace $NAMESPACE

echo "Applying cluster resources for namespace: $NAMESPACE"
cat << 'EOF' | NAMESPACE=$NAMESPACE envsubst | kubectl apply -f -
# RBAC Role
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: podfiles-role
rules:
  - apiGroups: [""]
    resources:
      - "namespaces"
      - "pods"
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create", "get"]
---
# RBAC RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: podfiles-role-binding
subjects:
  - kind: ServiceAccount
    name: podfiles-sa
    namespace: ${NAMESPACE}
roleRef:
  kind: ClusterRole
  name: podfiles-role
  apiGroup: rbac.authorization.k8s.io

EOF

echo "Applying namespace resources in namespace: $NAMESPACE"
cat << 'EOF' | IMAGE=$IMAGE DOMAIN=$DOMAIN envsubst | kubectl -n $NAMESPACE apply -f -
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: podfiles-sa

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: podfiles
  labels:
    app: podfiles
spec:
  replicas: 1
  selector:
    matchLabels:
      app: podfiles
  template:
    metadata:
      labels:
        app: podfiles
    spec:
      serviceAccountName: podfiles-sa
      containers:
        - name: podfiles
          image: ${IMAGE}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: podfiles
spec:
  selector:
    app: podfiles
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: ClusterIP

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: podfiles
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
    - host: ${DOMAIN}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: podfiles
                port:
                  number: 80

EOF

echo "✅ Deployment completed successfully"